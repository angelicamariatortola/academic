
## N-variate Simpler Matern model
## Covariance function
sig_SimpMatN <- function(par, U_vec, nvar)
{
  phi <- par[1:nvar]
  v   <- par[(nvar+1):(2*nvar)]
  s   <- par[(2*nvar+1):(3*nvar)]
  rho <- par[(3*nvar+1):length(par)]
  
  SigmaB <- vec2symMat(rho, diag = F)
  
  ct <- lapply(1:nvar, function(x) {Matrix::chol((s[x]^2)*
        vec2symMat(geoR::matern(u = U_vec,
        kappa = v[x], phi = phi[x]), diag = F))})
  
  cros1 <- crossprod(bdiag(ct), kronecker(SigmaB, diag(nrow(ct[[1]]))))
  Sigma <- tcrossprod(cros1, t(bdiag(ct)))
  Sigma <- as.matrix(Sigma)
  return(Sigma)
}
## Likelihood function
ll_SimpMatN <- function(par, y, U_vec, nvar, logpars = FALSE) 
{
  if(logpars)
  {
    par <- c(exp(par[1:(3*nvar)]), tanh(par[(3*nvar+1):length(par)]))
  }
  
  Sigma <- sig_SimpMatN(par = par, U_vec = U_vec, nvar = nvar)
  
  out <- dmvn(X = y, mu = rep(0,length(y)), sigma = Sigma, log = TRUE)
  #print(out)
  return(out)
}

## Estimate N-variate MatSimpler model
estima_MatSimpler <- function(ini_pars, U_vec, y, method, nvar, logpars, maxit, hessian)
{
  time_MatSimpler <- system.time(est_MatSimpler <- try(optim(par = ini_pars,
                     fn = ll_SimpMatN, U_vec = U_vec, y = y, logpars = logpars,
                     control = list(fnscale = -1, maxit = maxit),
                     nvar = nvar, method=method, hessian = hessian)))
  ncomb <- paste(comb_n(nvar,2)[1,], 
                 comb_n(nvar,2)[2,], sep = "")
  
  if(logpars && hessian)
  {
    var_par <- diag(-solve(est_MatSimpler$hessian));
    deriv_param <- c(exp(est_MatSimpler$par[1:(3*nvar)]),
                     (1-(tanh(est_MatSimpler$par[(3*nvar+1):length(est_MatSimpler$par)])^2)));
    fits_pars <- rbind(c(exp(est_MatSimpler$par[1:(3*nvar)]), 
                 tanh(est_MatSimpler$par[(3*nvar+1):length(est_MatSimpler$par)])),
                 sqrt((deriv_param^2)*var_par))
  }else if(logpars && !hessian)
  {
    fits_pars <- rbind(c(exp(est_MatSimpler$par[1:(3*nvar)]), 
                         tanh(est_MatSimpler$par[(3*nvar+1):length(est_MatSimpler$par)])))
  }else if(!logpars && hessian)
  {
    fits_pars <- rbind(est_MatSimpler$par, sqrt(diag(-solve(est_MatSimpler$hessian))))
  }else{fits_pars <- rbind(est_MatSimpler$par)}

  colnames(fits_pars) <- c(paste("phi", 1:nvar, sep = ""), 
                           paste("v", 1:nvar, sep = ""), 
                           paste("s", 1:nvar, sep = ""), 
                           paste("rho", ncomb, sep = ""))
  
  ll_value <- est_MatSimpler$value
  aic <- 2*length(est_MatSimpler$par) - 2*ll_value
  bic <- log(length(y)/nvar)*length(est_MatSimpler$par) - 2*ll_value
  fits_info <- cbind(length(est_MatSimpler$par),
                     ll_value, aic, bic)
  colnames(fits_info) <- c("Nº param", "LL", "AIC", "BIC")
  fits_time <- time_MatSimpler[1:3]
  
  if(est_MatSimpler$convergence == 0)
  {
    convergence_model <- "Successful"
  }else(convergence_model <- "Not Successful")
  return(list(est_param = fits_pars, info_crite = fits_info,
              time = fits_time, convergence = convergence_model))
}  

## Estimate Bivariate GeoModels models 
## Constrained Matérn model
estima_Bi_MatGneiContr <- function(dados, ini_pars, method, hessian)
{
  fixed1 = list(mean_1 = 0, mean_2 = 0, nugget_1 = 0, nugget_2 = 0)
  start1 = list(sill_1 = ini_pars[1], sill_2 = ini_pars[2], 
                scale_1 = ini_pars[3], scale_2 = ini_pars[4], 
                smooth_1 = ini_pars[5], smooth_2 = ini_pars[6],
                pcol = ini_pars[7])
  
  time_fitml1 <- system.time(fitml1 <- GeoFit(data=t(dados[,3:4]), 
                                              coordx=dados[,1:2], likelihood="Full",
                                              corrmodel="Bi_Matern_contr", type="Standard", varest = hessian,
                                              optimizer=method, start = start1, fixed = fixed1))
  
  param1 = list(pcol = as.numeric(fitml1$param[1]),
                scale_1 = as.numeric(fitml1$param[2]),
                scale_2 = as.numeric(fitml1$param[3]),
                sill_1 = as.numeric(fitml1$param[4]),
                sill_2 = as.numeric(fitml1$param[5]),
                smooth_1 = as.numeric(fitml1$param[6]),
                smooth_2 = as.numeric(fitml1$param[7]))
  if(hessian)
  {
    std1 <- list(pcol = as.numeric(fitml1$stderr[1]),
                scale_1 = as.numeric(fitml1$stderr[2]),
                scale_2 = as.numeric(fitml1$stderr[3]),
                sill_1 = as.numeric(fitml1$stderr[4]),
                sill_2 = as.numeric(fitml1$stderr[5]),
                smooth_1 = as.numeric(fitml1$stderr[6]),
                smooth_2 = as.numeric(fitml1$stderr[7]))
    fits_pars <- rbind(c(param1$scale_1, param1$scale_2, param1$smooth_1, param1$smooth_2,
                         sqrt(c(param1$sill_1, param1$sill_2)), param1$pcol), 
                       c(std1$scale_1, std1$scale_2, std1$smooth_1, std1$smooth_2,
                         (1/(2*sqrt(param1$sill_1)))*(std1$sill_1^2),
                         (1/(2*sqrt(param1$sill_2)))*(std1$sill_2^2), std1$pcol))
  }else{
    fits_pars <- rbind(c(param1$scale_1, param1$scale_2, param1$smooth_1, param1$smooth_2,
                         sqrt(c(param1$sill_1, param1$sill_2)), param1$pcol))
  }
 
  colnames(fits_pars) <- c("phi1", "phi2", "v1", "v2", "s1", "s2", "rho12")
  
  fits_info <- cbind(length(fitml1$param),
                     fitml1$logCompLik, fitml1$claic, fitml1$clbic)
  colnames(fits_info) <- c("Nº param", "LL", "AIC", "BIC")
  fits_time <- time_fitml1[1:3]
  
  return(list(est_param = fits_pars, info_crite = fits_info,
              time = fits_time, convergence = fitml1$convergence))
} 

## Independent Matérn model
estima_Bi_MatGneiInd <- function(dados, ini_pars, method, hessian)
{
  fixed1 = list(mean_1 = 0, mean_2 = 0, nugget_1 = 0, nugget_2 = 0, pcol = 0)
  start1 = list(sill_1 = ini_pars[1], sill_2 = ini_pars[2], 
                scale_1 = ini_pars[3], scale_2 = ini_pars[4], 
                smooth_1 = ini_pars[5], smooth_2 = ini_pars[6])
  
  time_fitml1 <- system.time(fitml1 <- GeoFit(data=t(dados[,3:4]), 
                                              coordx=dados[,1:2], likelihood="Full",
                                              corrmodel="Bi_Matern_contr", type="Standard", varest = hessian,
                                              optimizer=method, start = start1, fixed = fixed1))
  
  param1 = list(scale_1  = as.numeric(fitml1$param[1]),
                scale_2  = as.numeric(fitml1$param[2]),
                sill_1   = as.numeric(fitml1$param[3]),
                sill_2   = as.numeric(fitml1$param[4]),
                smooth_1 = as.numeric(fitml1$param[5]),
                smooth_2 = as.numeric(fitml1$param[6]))
  if(hessian)
  {
    std1 = list(scale_1 = as.numeric(fitml1$stderr[1]),
              scale_2 = as.numeric(fitml1$stderr[2]),
              sill_1 = as.numeric(fitml1$stderr[3]),
              sill_2 = as.numeric(fitml1$stderr[4]),
              smooth_1 = as.numeric(fitml1$stderr[5]),
              smooth_2 = as.numeric(fitml1$stderr[6]))
    fits_pars <- rbind(c(param1$scale_1, param1$scale_2, param1$smooth_1, param1$smooth_2,
                       sqrt(c(param1$sill_1, param1$sill_2))), 
                     c(std1$scale_1, std1$scale_2, std1$smooth_1, std1$smooth_2,
                       (1/(2*sqrt(param1$sill_1)))*(std1$sill_1^2),
                       (1/(2*sqrt(param1$sill_2)))*(std1$sill_2^2)))
  }else{
    fits_pars <- rbind(c(param1$scale_1, param1$scale_2, param1$smooth_1, param1$smooth_2,
                         sqrt(c(param1$sill_1, param1$sill_2))))
  }
  
  colnames(fits_pars) <- c("phi1", "phi2", "v1", "v2", "s1", "s2")
  
  fits_info <- cbind(length(fitml1$param),
                     fitml1$logCompLik, fitml1$claic, fitml1$clbic)
  colnames(fits_info) <- c("Nº param", "LL", "AIC", "BIC")
  fits_time <- time_fitml1[1:3]
  
  return(list(est_param = fits_pars, info_crite = fits_info,
              time = fits_time, convergence = fitml1$convergence))
} 

## LMC model
estima_Bi_LMC <- function(dados, ini_pars, method, hessian)
{
  fixed1 = list(mean_1 = 0, mean_2 = 0, nugget_1 = 0, nugget_2 = 0)
  start1 = list(a_1 = ini_pars[1], a_12 = ini_pars[2], 
                a_2 = ini_pars[3], a_21 = ini_pars[4], 
                scale_1 = ini_pars[5], scale_2 = ini_pars[6])
  
  time_fitml1 <- system.time(fitml1 <- GeoFit(data=t(dados[,3:4]), 
                                              coordx=dados[,1:2], likelihood="Full",
                                              corrmodel="Bi_LMC", type="Standard", varest = hessian,
                                              optimizer=method, start = start1, fixed = fixed1))
  
  if(hessian)
  {
    fits_pars <- rbind(fitml1$param, fitml1$stderr)
  }else{
    fits_pars <- rbind(fitml1$param)
  }
 
  colnames(fits_pars) <- c("a11", "a12", "a22", "a21", "phi1", "phi2")
  fits_info <- cbind(length(fitml1$param),
                     fitml1$logCompLik, fitml1$claic, fitml1$clbic)
  colnames(fits_info) <- c("Nº param", "LL", "AIC", "BIC")
  fits_time <- time_fitml1[1:3]
  
  return(list(est_param = fits_pars, info_crite = fits_info,
              time = fits_time, convergence = fitml1$convergence))
} 

## Separable Matérn model
estima_Bi_MatGneiSep <- function(dados, ini_pars, method, hessian)
{
  fixed1 = list(mean_1 = 0, mean_2 = 0, nugget_1 = 0, nugget_2 = 0)
  start1 = list(sill_1 = ini_pars[1], sill_2 = ini_pars[2], 
                scale = ini_pars[3], smooth = ini_pars[4],
                pcol = ini_pars[5])
  
  time_fitml1 <- system.time(fitml1 <- GeoFit(data=t(dados[,3:4]), 
                                              coordx=dados[,1:2], likelihood="Full",
                                              corrmodel="Bi_Matern_sep", type="Standard", varest = hessian,
                                              optimizer=method, start = start1, fixed = fixed1))
  param1 = list(pcol = as.numeric(fitml1$param[1]),
                scale = as.numeric(fitml1$param[2]),
                sill_1 = as.numeric(fitml1$param[3]),
                sill_2 = as.numeric(fitml1$param[4]),
                smooth = as.numeric(fitml1$param[5]))
  if(hessian)
  {
    std1 = list(pcol = as.numeric(fitml1$stderr[1]),
                scale = as.numeric(fitml1$stderr[2]),
                sill_1 = as.numeric(fitml1$stderr[3]),
                sill_2 = as.numeric(fitml1$stderr[4]),
                smooth = as.numeric(fitml1$stderr[5]))
    fits_pars <- rbind(c(param1$scale, param1$smooth,
                         sqrt(c(param1$sill_1, param1$sill_2)), param1$pcol), 
                       c(std1$scale, std1$smooth,
                         (1/(2*sqrt(param1$sill_1)))*(std1$sill_1^2),
                         (1/(2*sqrt(param1$sill_2)))*(std1$sill_2^2), std1$pcol))
  }else{
    fits_pars <- rbind(c(param1$scale, param1$smooth,
                         sqrt(c(param1$sill_1, param1$sill_2)), param1$pcol))
  }

  colnames(fits_pars) <- c("phi", "v", "s1", "s2", "rho12")
  fits_info <- cbind(length(fitml1$param),
                     fitml1$logCompLik, fitml1$claic, fitml1$clbic)
  colnames(fits_info) <- c("Nº param", "LL", "AIC", "BIC")
  fits_time <- time_fitml1[1:3]
  
  return(list(est_param = fits_pars, info_crite = fits_info,
              time = fits_time, convergence = fitml1$convergence))
}  
