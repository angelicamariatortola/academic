[["estruturas-de-dados.html", "Capítulo 2 Estruturas de Dados 2.1 Vetores 2.2 Fatores 2.3 Matrizes 2.4 Listas 2.5 Data Frames", " Capítulo 2 Estruturas de Dados No R, as principais estruturas de dados são: Vetores Fatores Matrizes Listas Data frames 2.1 Vetores Vetores são a estrutura de dados mais básica do R. Um vetor é uma sequência de elementos do mesmo tipo, podendo ser numérico, caracter ou lógico. Pode ser definido como um conjunto de valores: \\(V=(v_1,v_2,...,v_n)\\). Principais Características dos Vetores Homogeneidade: Todos os elementos devem ser do mesmo tipo (numérico, lógico ou caractere). Indexação Baseada em 1: O acesso aos elementos é feito por índices que começam em 1 (diferente de outras linguagens como Python e C, que começam em 0). Operações Vetorizadas: Permite a realização de operações matemáticas diretamente sobre o vetor. Tamanho Dinâmico: Podem ser expandidos automaticamente conforme necessário. Reciclagem de Vetores: Quando os vetores têm tamanhos diferentes, o vetor menor é reciclado para igualar o comprimento do maior. Criando um vetor Criando um vetor com c() # Vetor numérico a &lt;- c(1, 2, 3, 4, 5) # Vetor de caracteres b &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) # Vetor lógico c &lt;- c(TRUE, FALSE, TRUE) # Vetor misto (convertido para caractere) d &lt;- c(1, &quot;teste&quot;, TRUE) # Exibindo os vetores print(a) print(b) print(c) print(d) Criando um vetor com seq() Usar \\(a:b\\) cria uma sequência de a a b, ou seja, \\(a, a+1, a+2, ..., b\\) ## Criando uma sequencia de 1 a 6 1:6 ## Criando uma sequencia de 5 a 10 5:10 ## Criando uma sequencia decrescente de 10 a 1 10:1 Também podemos usar a função seq() para criar sequências: seq(from = 1, to = 10, by = 2) # gera sequencias de numeros # from: valor inicial, to: valor final, # by (opcional): Incremento, # length.out (opcional): Número total de elementos ## Criando uma sequencia de 1 a 6 seq(from = 1, to = 6, by = 1) #equivalente a 1:6 ## Criando uma sequencia de 1 a 10, com 5 elementos seq(1, 10, length.out = 5) Criando um vetor com a função seq() seq1 &lt;- seq(1, 10, length.out = 5) Criando um vetor com rep() rep(2, times = 3) # repete números ou vetores # x: O valor ou vetor a ser repetido. # times: Número total de repetições do vetor completo. # length.out: Define o comprimento final do vetor gerado. # each: Número de repetições de cada elemento individualmente. # times ou length.out devem ser usados. ## Repete o valor 5, até completar 2 elementos rep(5, length.out = 2) ## Repete o vetor c(2,3) até completar 5 elementos rep(c(2,3), length.out = 5) ## Repete o vetor c(2,3) até 5 vezes rep(c(2,3), times = 5) ## Repete cada elemento do vetor c(2,3), 3 vezes rep(c(2,3), each = 3) Criando um vetor com a função rep() rep1 &lt;- rep(c(1,2), each = 3) Criando um vetor com scan() Manipulação e características de vetores # Criando um vetor: a &lt;- c(1,2,5,7,8,10) # Primeiro elemento de a a[1] # Último elemento a[6] # Subconjunto de elementos a[2:4] # Elementos específicos a[c(1, 3, 5)] Modificando valores do vetor \\(a\\): # Substituindo um elemento a[2] &lt;- 99 print(a) # Adicionando novos elementos a &lt;- c(a, 200) print(a) # ou usando a função append(): a &lt;- append(a, 300) # Removendo alguma posição do vetor: a &lt;- a[-2] # Removendo mais de uma posição do vetor: a &lt;- a[-c(2,3)] Nomeando os Elementos do Vetor # Nomes do vetor a: names(a) # Atribuindo nomes para o vetor a: names(a) &lt;- c(&quot;x1&quot;, &quot;x2&quot;, &quot;x3&quot;, &quot;x4&quot;, &quot;x5&quot;) a[&quot;x1&quot;] # Retorna 3 (elemento nomeado &quot;a&quot;) Algumas características sobre o vetor: # Seja o vetor numérico: vec_num &lt;- c(3,6,7,9) # (1) Tamanho (número de elementos): length(vec_num) ## [1] 4 # (2) estrutura: str(vec_num) ## num [1:4] 3 6 7 9 # Seja o vetor de caracteres: vec_carac &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) # (1) Tamanho (número de elementos): length(vec_carac) ## [1] 3 # (2) estrutura: str(vec_carac) ## chr [1:3] &quot;A&quot; &quot;B&quot; &quot;C&quot; # Seja o vetor de valores lógicos: vec_logi &lt;- c(TRUE, TRUE, FALSE) # (1) Tamanho (número de elementos): length(vec_logi) ## [1] 3 # (2) estrutura: str(vec_logi) ## logi [1:3] TRUE TRUE FALSE Perguntando sobre o tipo do vetor: # is.vector -&gt; identifica qualquer tipo de vetor is.vector(vec_num) ## [1] TRUE is.vector(vec_carac) ## [1] TRUE is.vector(vec_logi) ## [1] TRUE # is.character -&gt; identifica vetores de caracteres is.character(vec_num) ## [1] FALSE is.character(vec_carac) ## [1] TRUE is.character(vec_logi) ## [1] FALSE # is.logical -&gt; identifica vetores de valores logicos is.logical(vec_num) ## [1] FALSE is.logical(vec_carac) ## [1] FALSE is.logical(vec_logi) ## [1] TRUE Para converter vetores de um tipo para outro tipo, funções as.vector, as.character, as.logical: # as.character -&gt; Transforma em vetor de caracteres vec_num_carac &lt;- as.character(vec_num) str(vec_num_carac) ## chr [1:4] &quot;3&quot; &quot;6&quot; &quot;7&quot; &quot;9&quot; vec_logi_carac &lt;- as.character(vec_logi) str(vec_logi_carac) ## chr [1:3] &quot;TRUE&quot; &quot;TRUE&quot; &quot;FALSE&quot; # as.logical -&gt; Transforma em vetor de valores lógicos vec_num_logi &lt;- as.logical(c(0,1,1,0)) str(vec_num_logi) ## logi [1:4] FALSE TRUE TRUE FALSE Exercícios 1. Gere o seguinte vetor usando rep(): 5 5 5 5 5 10 10 10 10 10. 2. Use rep() para gerar um vetor que repita c(“A”, “B”, “C”) até atingir o tamanho exato de 8 elementos. 3. Use seq() para gerar uma sequência de números de 1 a 20, pulando de 2 em 2. 4. Crie uma sequência de 5 números entre 0 e 1, com espaçamento igual entre eles. 5. A partir do vetor v &lt;- c(5, 10, 15, 20, 25, 30), extraia os elementos da posição 2 até a 5. 6. Dado v &lt;- c(3, 7, 12, 18, 25), obtenha apenas os valores maiores que 10. 7. Dado v &lt;- c(10, 20, 30, 40, 50), substitua os elementos das posições 2 e 4 por 999. 8. Dado v &lt;- c(2, 4, 6, 8, 10), remova o número que está na posição 4. 9. Dado v &lt;- c(\"1\", \"2\", \"3\", \"4\"), converta-o para numérico. 10. Dado v &lt;- c(100, 200, 300), converta-o para caractere. Respostas # 1. rep(c(5, 10), each = 5) ## [1] 5 5 5 5 5 10 10 10 10 10 # 2. rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), length.out = 8) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;A&quot; &quot;B&quot; # 3. seq(1, 20, by = 2) ## [1] 1 3 5 7 9 11 13 15 17 19 # 4. seq(0, 1, length.out = 5) ## [1] 0.00 0.25 0.50 0.75 1.00 # 5. v &lt;- c(5, 10, 15, 20, 25, 30) v[2:5] # Elementos da posição 2 até 5 ## [1] 10 15 20 25 # 6. v &lt;- c(3, 7, 12, 18, 25) v[v &gt; 10] # Retorna valores maiores que 10 ## [1] 12 18 25 # 7. v &lt;- c(10, 20, 30, 40, 50) v[c(2, 4)] &lt;- 999 # Modifica as posições 2 e 4 # 8. v &lt;- c(2, 4, 6, 8, 10) v &lt;- v[-4] # Remove o quarto elemento v ## [1] 2 4 6 10 # 9. v &lt;- c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;) v_numeric &lt;- as.numeric(v) v_numeric ## [1] 1 2 3 4 # 10. v &lt;- c(100, 200, 300) v_char &lt;- as.character(v) v_char ## [1] &quot;100&quot; &quot;200&quot; &quot;300&quot; Acesso Professor Operações com vetores Operações Aritméticas (elemento a elemento) # Considere os valores: a &lt;- 2 v1 &lt;- c(1, 2, 3) v2 &lt;- c(4, 5, 6) ## Soma # Soma de vetores: v1+v2 ## [1] 5 7 9 # Soma de vetor com escalar: v1+a ## [1] 3 4 5 ## Subtração # Subtração de vetores: v1-v2 ## [1] -3 -3 -3 # Subtração de vetor com escalar: v1-a ## [1] -1 0 1 ## Multiplicação # Multiplicação de vetores v1*v2 ## [1] 4 10 18 # Multiplicação de vetor com escalar: v1*a ## [1] 2 4 6 ## Divisão # Divisão de vetores v1/v2 ## [1] 0.25 0.40 0.50 # Resto da divisão v2%%v1 ## [1] 0 1 0 # Parte inteira da divisão v2%/%v1 ## [1] 4 2 2 # Divisão de vetor por escalar: v1/a ## [1] 0.5 1.0 1.5 ## Potenciação # Potenciação de vetores v1^v2 ## [1] 1 32 729 # Potenciação de vetor por escalar: v1^a ## [1] 1 4 9 ## Produto Escalar v1%*%v2 ## [,1] ## [1,] 32 # equivalente a: crossprod(v1,v2) ## [,1] ## [1,] 32 # equivalente a: sum(v1*v2) ## [1] 32 Reciclagem de Vetores Quando os vetores têm tamanhos diferentes, o vetor menor é reciclado para igualar o comprimento do maior. v1 &lt;- c(1, 2, 3, 4) v2 &lt;- c(10, 20) v1 + v2 ## [1] 11 22 13 24 Operações Lógicas e de Comparação v1 &gt; v2 ## [1] FALSE FALSE FALSE FALSE v1 &lt; v2 ## [1] TRUE TRUE TRUE TRUE v1 == v2 ## [1] FALSE FALSE FALSE FALSE v1 != v2 ## [1] TRUE TRUE TRUE TRUE # Considere os valores: x1 &lt;- c(TRUE, FALSE, TRUE) x2 &lt;- c(FALSE, FALSE, TRUE) x1 &amp; x2 ## [1] FALSE FALSE TRUE x1 | x1 ## [1] TRUE FALSE TRUE !x1 ## [1] FALSE TRUE FALSE Exercícios 1. Calcule o cubo dos números inteiros de 1 a 100, ou seja, \\(1^3, 2^3, ..., 100^3\\). 2. Sejam v1 &lt;- c(3, 6, 9, 12) e v2 &lt;- c(2, 4, 6, 8). Calcule v1 + v2, v1 - v2, v1 * v2 e v1 / v2. Eleve cada elemento de v1 ao quadrado. Calcule a raiz quadrada de cada elemento de v2. Calcule o produto escalar entre os vetores. 3. Considere v3 &lt;- c(10, 20, 30) e v4 &lt;- c(5, 15). Some v3 + v4. O que aconteceu? Multiplique v3 * v4. O que aconteceu? Explique o conceito de reciclagem de vetores com base no resultado. 4. Considere v6 &lt;- c(10, 15, 20, 25) e v7 &lt;- c(12, 15, 18, 28). Compare v6 e v7 usando &gt;, &lt;, ==, !=. Quais valores de v6 são maiores que 15? Quais valores de v7 são menores ou iguais a 20? Respostas # 1. x &lt;- 1:100 x^3 ## [1] 1 8 27 64 125 216 343 512 729 ## [10] 1000 1331 1728 2197 2744 3375 4096 4913 5832 ## [19] 6859 8000 9261 10648 12167 13824 15625 17576 19683 ## [28] 21952 24389 27000 29791 32768 35937 39304 42875 46656 ## [37] 50653 54872 59319 64000 68921 74088 79507 85184 91125 ## [46] 97336 103823 110592 117649 125000 132651 140608 148877 157464 ## [55] 166375 175616 185193 195112 205379 216000 226981 238328 250047 ## [64] 262144 274625 287496 300763 314432 328509 343000 357911 373248 ## [73] 389017 405224 421875 438976 456533 474552 493039 512000 531441 ## [82] 551368 571787 592704 614125 636056 658503 681472 704969 729000 ## [91] 753571 778688 804357 830584 857375 884736 912673 941192 970299 ## [100] 1000000 # 2. v1 &lt;- c(3, 6, 9, 12) v2 &lt;- c(2, 4, 6, 8) v1 + v2 ## [1] 5 10 15 20 v1 - v2 ## [1] 1 2 3 4 v1 * v2 ## [1] 6 24 54 96 v1 / v2 ## [1] 1.5 1.5 1.5 1.5 v1^2 ## [1] 9 36 81 144 sqrt(v2) ## [1] 1.414214 2.000000 2.449490 2.828427 v1%*%v2 ## [,1] ## [1,] 180 # 3. v3 &lt;- c(10, 20, 30) v4 &lt;- c(5, 15) v3+v4 ## Warning in v3 + v4: comprimento do objeto maior não é múltiplo do comprimento ## do objeto menor ## [1] 15 35 35 v3*v4 ## Warning in v3 * v4: comprimento do objeto maior não é múltiplo do comprimento ## do objeto menor ## [1] 50 300 150 # 4. v6 &lt;- c(10, 15, 20, 25) v7 &lt;- c(12, 15, 18, 28) v6&gt;v7 ## [1] FALSE FALSE TRUE FALSE v6&lt;v7 ## [1] TRUE FALSE FALSE TRUE v6==v7 ## [1] FALSE TRUE FALSE FALSE v6!=v7 ## [1] TRUE FALSE TRUE TRUE v6[v6&gt;15] ## [1] 20 25 v7[v7 &lt;= 20] ## [1] 12 15 18 Acesso Professor Funções úteis para vetores sum() - Soma dos elementos do vetor x &lt;- c(1, 3, 7, 8, 15) sum(x) ## [1] 34 length() - Tamanho do vetor x &lt;- c(2, 4, 6, 8, 10) length(x) ## [1] 5 sort() - Ordenar um vetor x &lt;- c(10, 5, 8, 3, 1) sort(x) # Ordenação crescente ## [1] 1 3 5 8 10 sort(x, decreasing = TRUE) # Ordenação decrescente ## [1] 10 8 5 3 1 which() - Índices que satisfazem uma condição x &lt;- c(10, 20, 30, 40, 50) which(x &gt; 25) # Retorna os índices dos elementos maiores que 25 ## [1] 3 4 5 unique() - Elementos únicos x &lt;- c(1, 2, 2, 3, 3, 3, 4, 4, 4, 4) unique(x) # Retorna os valores únicos ## [1] 1 2 3 4 table() - Frequência dos elementos x &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;B&quot;, &quot;A&quot;) table(x) # Conta quantas vezes cada letra aparece ## x ## A B C ## 3 3 1 %in% - Operador de Pertinência Verifica se os elementos de um vetor estão presentes em outro. x &lt;- c(1, 2, 3, 4, 5) y &lt;- c(2, 4, 6) x %in% y # Verifica quais elementos de x estão em y ## [1] FALSE TRUE FALSE TRUE FALSE # Terá o tamanho de x # Se quisermos filtrar os valores de x que estão em y: x[x %in% y] # Retorna apenas os elementos de x que também estão em y ## [1] 2 4 Table 2.1: Resumo das Funções para Vetores no R Funcao Descricao Exemplo sum() Soma dos elementos do vetor sum(c(1, 4, 2)) → 7 length() Número de elementos do vetor length(c(1, 2, 3)) → 3 sort() Ordena os elementos do vetor sort(c(5, 1, 3)) → 1 3 5 which() Indices dos elementos que atendem a uma condição which(c(2, 5, 8) &gt; 4) → 2 3 unique() Valores únicos de um vetor unique(c(1, 1, 2, 3, 3)) → 1 2 3 table() Frequência de cada elemento do vetor table(c(‘A’, ‘B’, ‘A’)) → A:2 B:1 %in% Verifica se os elementos de um vetor pertencem a outro c(2, 3, 4) %in% c(3, 4, 5) → FALSE TRUE TRUE Valores perdidos e especiais Valores perdidos devem ser definidos como NA (not available): x &lt;- c(1, 3, NA, 2) x ## [1] 1 3 NA 2 Outros valores especiais são NaN (not a number),-Inf (menos infinito) e Inf (mais infinito): y &lt;- 0/0 print(y) ## [1] NaN z &lt;- 1/0 print(z) ## [1] Inf Podemos testar a presença de valores especiais: # Testando presença de NA ou NaN: x &lt;- c(1, 3, NA, 2) is.na(x) ## [1] FALSE FALSE TRUE FALSE # ou any(is.na(x)) ## [1] TRUE y &lt;- 0/0 is.na(y) ## [1] TRUE # Testando presença de -Inf ou Inf: z &lt;- 1/0 is.infinite(z) ## [1] TRUE 2.2 Fatores Os fatores no R são similares aos vetores de caracteres. No entanto, o fator contém categorias (niveis), armazenando valores que pertencem a estes níveis. Para criar fatores, usa-se a função factor(). # Vetor de caracteres cores_char &lt;- c(&quot;azul&quot;, &quot;vermelho&quot;, &quot;verde&quot;, &quot;azul&quot;) print(cores_char) ## [1] &quot;azul&quot; &quot;vermelho&quot; &quot;verde&quot; &quot;azul&quot; # O vetor de caracteres apenas contém texto. # Fator cores_fac &lt;- factor(cores_char) print(cores_fac) ## [1] azul vermelho verde azul ## Levels: azul verde vermelho # O fator atribui níveis e os valores são referências a esses níveis. Conversão de fator e vetor de caracteres: # Conversão de fator para vetor de caracteres as.character(cores_fac) ## [1] &quot;azul&quot; &quot;vermelho&quot; &quot;verde&quot; &quot;azul&quot; # Conversão de vetor de caracteres para fator factor(cores_char) ## [1] azul vermelho verde azul ## Levels: azul verde vermelho # ou usando as.factor(): as.factor(cores_char) ## [1] azul vermelho verde azul ## Levels: azul verde vermelho 📌 Quando Usar Cada Um? ✔ Caracteres (character): se os dados forem simplesmente rótulos sem necessidade de categorias ordenadas ou níveis fixos. ✔ Fatores (factor): se os dados representam categorias que serão usadas em análises estatísticas ou visualizações gráficas. A ordem dos níveis dos fatores pode também ser modificada através do argumento levels: cores_levels &lt;- factor(c(&quot;azul&quot;, &quot;vermelho&quot;, &quot;verde&quot;, &quot;azul&quot;), levels = c(&quot;verde&quot;,&quot;azul&quot;,&quot;vermelho&quot;)) cores_levels ## [1] azul vermelho verde azul ## Levels: verde azul vermelho Além disso, os níveis dos fatores podem também ser explicitamente definidos como ordenados, com o argumento ordered = TRUE: satisfacao &lt;- factor(c(&quot;Ruim&quot;, &quot;Bom&quot;, &quot;Excelente&quot;, &quot;Bom&quot;, &quot;Ruim&quot;), levels = c(&quot;Ruim&quot;, &quot;Bom&quot;, &quot;Excelente&quot;), ordered = TRUE) satisfacao ## [1] Ruim Bom Excelente Bom Ruim ## Levels: Ruim &lt; Bom &lt; Excelente Comparação entre ordered = TRUE e ordered = FALSE ordered = TRUE: implica que o R respeita a ordem entre os níveis, permitindo comparações e análises baseadas nessa ordem (variáveis ordinais). ordered = FALSE: significa que os níveis são apenas categorias e não são comparáveis em termos de hierarquia ou ordem (variáveis nominais). Outras funções úteis para fatores: # Níveis do fator levels(cores_levels) ## [1] &quot;verde&quot; &quot;azul&quot; &quot;vermelho&quot; # Número de níveis do fator nlevels(cores_levels) ## [1] 3 Exercícios 1. Dado o vetor: v1 &lt;- c(2, 4, 6, 2, 8, 6, 10, 2, 4, 6) Use funções do R para: Contar o número total de elementos do vetor. Encontrar os elementos únicos do vetor. Ordenar os valores do vetor em ordem decrescente. 2. Dado o vetor de fatores: fatores &lt;- factor(c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot;)) Use funções do R para: Contar quantas vezes cada nível aparece. Listar os níveis únicos do fator. 3. Dados os vetores: v2 &lt;- c(5, 10, 15, 20, 25) v3 &lt;- c(10, 20, 30) Verifique quais elementos de v2 estão presentes em v3 usando %in%. Use a função which() para encontrar as posições dos valores de v2 que estão presentes em v3. 4. Dado o vetor: v4 &lt;- c(10, NA, 30, 50, NA, NaN, 20): Calcule a soma de todos os elementos, ignorando os valores ausentes (NA e NaN). Calcule o número de elementos não ausentes no vetor. Ordene o vetor em ordem crescente, colocando os valores ausentes por último. Use a função which() para encontrar a posição dos valores ausentes no vetor. 5. Dado o vetor de fatores: categorias &lt;- factor(c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot;, &quot;C&quot;)) Use table() para contar as frequências de cada nível. Altere o nível “B” para “X” e recalcule as frequências. Ordene os niveis em ordem alfabética usando sort() e recalcule as frequências. Respostas # 1. v1 &lt;- c(2, 4, 6, 2, 8, 6, 10, 2, 4, 6) length(v1) ## [1] 10 unique(v1) ## [1] 2 4 6 8 10 sort(v1, decreasing = T) ## [1] 10 8 6 6 6 4 4 2 2 2 # 2. fatores &lt;- factor(c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot;)) table(fatores) ## fatores ## A B C ## 4 3 3 unique(fatores) #ou ## [1] A B C ## Levels: A B C levels(fatores) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; # 3. v2 &lt;- c(5, 10, 15, 20, 25) v3 &lt;- c(10, 20, 30) # Verificando presença de elementos v2 %in% v3 # -&gt; elementos 10 e 20 ## [1] FALSE TRUE FALSE TRUE FALSE # Posições dos valores de v2 que estão em v3 which(v2 %in% v3) # -&gt; posições 2 e 4 ## [1] 2 4 # 4. v4 &lt;- c(10, NA, 30, 50, NA, NaN, 20) sum(v4, na.rm = TRUE) ## [1] 110 length(v4[!is.na(v4)]) ## [1] 4 sort(v4, na.last = TRUE) ## [1] 10 20 30 50 NA NA NaN which(is.na(v4)) ## [1] 2 5 6 # 5. categorias &lt;- factor(c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;A&quot;, &quot;C&quot;)) table(categorias) ## categorias ## A B C ## 5 3 2 levels(categorias)[levels(categorias) == &quot;B&quot;] &lt;- &quot;X&quot;; table(categorias) ## categorias ## A X C ## 5 3 2 categ_ord &lt;- factor(categorias, levels = sort(levels(categorias))); table(categ_ord) ## categ_ord ## A C X ## 5 2 3 Acesso Professor 2.3 Matrizes Matrizes são estruturas bidimensionais de dados, onde todos os elementos devem ser do mesmo tipo. Uma matriz pode ser definida como: \\[ M = \\begin{bmatrix} m_{11} &amp; m_{12} &amp; \\dots &amp; m_{1n} \\\\ m_{21} &amp; m_{22} &amp; \\dots &amp; m_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ m_{m1} &amp; m_{m2} &amp; \\dots &amp; m_{mn} \\end{bmatrix} \\] onde \\(m\\) é o número de linhas e \\(n\\) é o número de colunas da matriz. Neste caso, diz-se que a matriz tem dimensão \\(m\\times n\\). \\(m_{ij}\\) representa o elemento na linha \\(i\\) e coluna \\(j\\). Em programação, matrizes são usadas para armazenar dados de forma estruturada e realizar operações como multiplicação e transposição de maneira eficiente. No R, matrizes podem ser criadas com a função matrix() e podem ser manipuladas com operações matemáticas vetorizadas. # Exemplo de matriz 2x3 matriz &lt;- matrix(1:6, nrow = 2, ncol = 3) matriz ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 # Alterando o preenchimento da matriz por linhas: matriz_linhas &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = T) matriz_linhas ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 Para verificar a dimensão da matriz: dim(matriz) ## [1] 2 3 Adicionando colunas com cbind(): matriz_mais_colunas &lt;- cbind(matriz, rep(99, 2)) Adicionando linhas com rbind(): matriz_mais_linhas &lt;- rbind(matriz, rep(99, 3)) Renomeando linhas e colunas de uma matriz: colnames(matriz) &lt;- c(&quot;c1&quot;,&quot;c2&quot;,&quot;c3&quot;) rownames(matriz) &lt;- c(&quot;l1&quot;,&quot;l2&quot;) matriz ## c1 c2 c3 ## l1 1 3 5 ## l2 2 4 6 # ou podemos fazer: matriz2 &lt;- matrix(1:6, nrow = 2, dimnames = list(c(&quot;l1&quot;, &quot;l2&quot;), c(&quot;c1&quot;, &quot;c2&quot;, &quot;c3&quot;))) matriz2 ## c1 c2 c3 ## l1 1 3 5 ## l2 2 4 6 Acessando Elementos de Matrizes # Criando uma matriz 3x3 matriz &lt;- matrix(1:9, nrow = 3) matriz ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 # Para acessar o elemento da linha 2, coluna 3: matriz[2, 3] # Retorna 6 ## [1] 8 # Para acessar todos os elementos de uma linha ou coluna: # Acessando a segunda linha matriz[2, ] # Retorna a linha: 4, 5, 6 ## [1] 2 5 8 # Acessando a terceira coluna matriz[, 3] # Retorna a coluna: 3, 6, 9 ## [1] 7 8 9 # Se a matriz tiver nomes nas linhas ou colunas: colnames(matriz) &lt;- c(&quot;c1&quot;,&quot;c2&quot;,&quot;c3&quot;) rownames(matriz) &lt;- c(&quot;l1&quot;,&quot;l2&quot;, &quot;l3&quot;) matriz[&quot;l1&quot;,] # -&gt; linha 1 ## c1 c2 c3 ## 1 4 7 matriz[,&quot;c1&quot;] # -&gt; coluna 1 ## l1 l2 l3 ## 1 2 3 Também podemos modificar valores diretamente: matriz[1,2] &lt;- 10 # Muda o valor da posição (1,2) para 10 print(matriz) ## c1 c2 c3 ## l1 1 10 7 ## l2 2 5 8 ## l3 3 6 9 Operações Básicas com Matrizes: ## Soma de matrizes A &lt;- matrix(1:4, nrow = 2) B &lt;- matrix(5:8, nrow = 2) A; B ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## [,1] [,2] ## [1,] 5 7 ## [2,] 6 8 nrow(A) # Número de linhas ## [1] 2 ncol(A) # Número de colunas ## [1] 2 dim(A) # dimensão da matriz: número de linhas e número de colunas ## [1] 2 2 A + B # Soma elemento a elemento ## [,1] [,2] ## [1,] 6 10 ## [2,] 8 12 ## Multiplicação elemento a elemento A * B ## [,1] [,2] ## [1,] 5 21 ## [2,] 12 32 ## Multiplicação de matrizes (produto matricial) A %*% B ## [,1] [,2] ## [1,] 23 31 ## [2,] 34 46 ## Transposta de uma matriz t(A) ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 ## Diagonal de uma matriz diag(A) ## [1] 1 4 ## Determinante de uma matriz det(A) ## [1] -2 ## Inversão de uma matriz solve(A) ## [,1] [,2] ## [1,] -2 1.5 ## [2,] 1 -0.5 ## Função solve para resolver sistemas de equações. Seja Ax=b, com b &lt;- c(2,5) # então a solução x do sistema é: solve(A, b) ## [1] 3.5 -0.5 # para a inversão da matriz apenas, b = I não precisa ser declarado. Exercícios 1. Crie uma matriz de dimensão 4x3 contendo os números de 1 a 12 preenchidos por linha. Em seguida, realize as seguintes operações: Acesse o elemento da terceira linha e segunda coluna. Extraia a segunda linha da matriz. Substitua o elemento da quarta linha e terceira coluna por 99. 2. Crie uma matriz M de dimensão 3×5 contendo os números de 1 a 15 preenchidos por coluna. Exiba a matriz M. Descubra o número de linhas e colunas usando nrow() e ncol(). Exiba a matriz preenchida por linha em vez de coluna. Extraia o elemento na segunda linha e quarta coluna. Modifique o elemento da terceira linha e quinta coluna para 100. Substitua todos os valores da primeira coluna por 0. 3. Crie duas matrizes A e B, ambas 3x3, contendo valores de 1 a 9 e de 10 a 18, respectivamente. Realize a soma e a subtração entre A e B. Multiplique elemento a elemento. Faça o produto matricial entre A e B. 4. Crie as matrizes: Uma matriz identidade 4×4 Uma matriz diagonal com os números 2, 4, 6 e 8 na diagonal principal. Respostas # 1. mat &lt;- matrix(1:12, ncol = 3, byrow = T) mat[3,2] ## [1] 8 mat[2,] ## [1] 4 5 6 mat[4,3] &lt;- 99 # 2. M &lt;- matrix(1:15, ncol = 5) M ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 4 7 10 13 ## [2,] 2 5 8 11 14 ## [3,] 3 6 9 12 15 nrow(M); ncol(M) ## [1] 3 ## [1] 5 M &lt;- matrix(1:15, ncol = 5, byrow = T) M[2,4] ## [1] 9 M[3,5] &lt;- 100 M[,1] &lt;- 0 # 3. A &lt;- matrix(1:9, ncol = 3) B &lt;- matrix(10:18, ncol = 3) A; B ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## [,1] [,2] [,3] ## [1,] 10 13 16 ## [2,] 11 14 17 ## [3,] 12 15 18 A + B ## [,1] [,2] [,3] ## [1,] 11 17 23 ## [2,] 13 19 25 ## [3,] 15 21 27 A - B ## [,1] [,2] [,3] ## [1,] -9 -9 -9 ## [2,] -9 -9 -9 ## [3,] -9 -9 -9 A*B ## [,1] [,2] [,3] ## [1,] 10 52 112 ## [2,] 22 70 136 ## [3,] 36 90 162 A%*%B ## [,1] [,2] [,3] ## [1,] 138 174 210 ## [2,] 171 216 261 ## [3,] 204 258 312 # 4. I &lt;- diag(4) matriz_diag &lt;- diag(c(2,4,6,8)) Acesso Professor 2.4 Listas Listas podem armazenar diferentes tipos de objetos, como vetores, matrizes, etc. Tem uma estrutura “unidimensional”: apenas o número de elementos na lista é contado. # Criando uma lista minha_lista &lt;- list(&quot;Ana&quot;, 25, c(8, 9, 10), matrix(1:4, ncol = 2)) minha_lista ## [[1]] ## [1] &quot;Ana&quot; ## ## [[2]] ## [1] 25 ## ## [[3]] ## [1] 8 9 10 ## ## [[4]] ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 Acessando elementos da lista: # Acessando o primeiro elemento minha_lista[[1]] ## [1] &quot;Ana&quot; # Acessando o quarto elemento minha_lista[[4]] ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 Visualizando a estrutura da lista: str(minha_lista) ## List of 4 ## $ : chr &quot;Ana&quot; ## $ : num 25 ## $ : num [1:3] 8 9 10 ## $ : int [1:2, 1:2] 1 2 3 4 Observe que é uma estrutura unidimensional: length(minha_lista) ## [1] 4 Renomeando os elementos da lista: names(minha_lista) ## NULL names(minha_lista) &lt;- c(&quot;nome&quot;, &quot;idade&quot;, &quot;notas&quot;, &quot;matriz&quot;) minha_lista ## $nome ## [1] &quot;Ana&quot; ## ## $idade ## [1] 25 ## ## $notas ## [1] 8 9 10 ## ## $matriz ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 # ou já poderiamos ter criado com os nomes: minha_lista &lt;- list(nome = &quot;Ana&quot;, idade = 25, notas = c(8, 9, 10), matriz = matrix(1:4, ncol = 2)) minha_lista ## $nome ## [1] &quot;Ana&quot; ## ## $idade ## [1] 25 ## ## $notas ## [1] 8 9 10 ## ## $matriz ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 2.5 Data Frames Os data.frames são estruturas de dados que armazenam colunas de diferentes tipos (numéricas, categóricas, lógicas). ## Criando um data frame dados &lt;- data.frame( Nome = c(&quot;Ana&quot;, &quot;Bruno&quot;, &quot;Carlos&quot;, &quot;Maria&quot;, &quot;Jose&quot;, &quot;Tata&quot;, &quot;Mia&quot;), Nivel_escolaridade = c(&quot;F&quot;,&quot;M&quot;,&quot;S&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;), Idade = c(25, 30, 22, 10, 15, 16, 24), Nota = c(8,6,3,4,7,2,9), Aprovado = c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE) ) ## Algumas operações em data frames: # Selecionando a segunda coluna dados[, 2] # Selecionando linhas com idade maior que 25 dados[dados$Idade &gt; 25, ] # Selecionando apenas a coluna &quot;Nome&quot; dados$Nome # Usando subset para filtrar dados subset(dados, Idade &gt; 25) # Selecionando apenas a coluna &quot;Nome&quot; onde a idade é maior que 25 subset(dados, Idade &gt; 25, select = Nome) # Ordenando o data frame por idade dados[order(dados$Idade), ] # Ordenando por idade em ordem decrescente dados[order(dados$Idade, decreasing = TRUE), ] # Adicionando uma nova coluna dados$Status &lt;- c(&quot;Aprovado&quot;, &quot;Aprovado&quot;, &quot;Reprovado&quot;, &quot;Aprovado&quot;) # Removendo uma coluna dados$Status &lt;- NULL # Renomeando colunas colnames(dados) &lt;- c(&quot;Nome_Aluno&quot;, &quot;Idade_Aluno&quot;, &quot;Nota_Final&quot;) dados "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
